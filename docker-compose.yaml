services:
  # MinIO Object Storage
  vpb25-datapipeline-minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - vpb25_lakehouse
    volumes:
      - vpb25_minio_data:/data

  # MinIO Client for bucket initialization
  vpb25-datapipeline-minio-init:
    image: minio/mc:latest
    networks:
      - vpb25_lakehouse
    depends_on:
      - vpb25-datapipeline-minio
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://vpb25-datapipeline-minio:9000 minioadmin minioadmin;
      mc mb myminio/staging;
      mc mb myminio/silver;
      mc mb myminio/lakehouse;
      mc policy set public myminio/staging;
      mc policy set public myminio/silver;
      mc policy set public myminio/lakehouse;
      echo 'MinIO buckets created successfully';
      "

  # Apache Iceberg REST Catalog
  vpb25-datapipeline-iceberg-rest:
    image: tabulario/iceberg-rest:latest
    environment:
      # Catalog configuration
      CATALOG_WAREHOUSE: s3://${LAKEHOUSE_BUCKET}/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      
      # S3/MinIO configuration - Use container network
      CATALOG_S3_ENDPOINT: http://vpb25-datapipeline-minio:9000
      CATALOG_S3_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      CATALOG_S3_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      CATALOG_S3_REGION: us-east-1
      CATALOG_S3_PATH__STYLE__ACCESS: true
      
      # AWS SDK configuration
      AWS_REGION: us-east-1
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
    ports:
      - "8181:8181"
    networks:
      - vpb25_lakehouse
    depends_on:
      - vpb25-datapipeline-minio
    restart: unless-stopped
  
  # FastAPI Application
  vpb25-datapipeline-app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    networks:
      - vpb25_lakehouse
    environment:
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_SECURE: false

      # Iceberg Configuration
      ICEBERG_CATALOG_URI: http://vpb25-datapipeline-iceberg-rest:8181
      ICEBERG_NAMESPACE: agent_lakehouse
      PYICEBERG_DOWNCAST_NS_TIMESTAMP_TO_US_ON_WRITE: true
      PYICEBERG_CATALOG__DEFAULT__URI: http://vpb25-datapipeline-iceberg-rest:8181

      # Qdrant Configuration
      QDRANT_API_KEY: ${QDRANT_API_KEY}
      QDRANT_URL: ${QDRANT_URL}
      QDRANT_COLLECTION_NAME: ${QDRANT_COLLECTION_NAME}

      # Gemini Configuration
      GEMINI_API_KEY: ${GEMINI_API_KEY}

      # Application Configuration
      APP_NAME: vpb25-lakehouse
      APP_PORT: 8000
      DEBUG: false
      LOG_LEVEL: INFO

      # Buckets
      STAGING_BUCKET: staging
      SILVER_BUCKET: silver
      LAKEHOUSE_BUCKET: lakehouse
      CRAWLED_BUCKET: crawled

      # Processing Configuration
      BATCH_SIZE: 100
      MAX_FILE_SIZE_MB: 50
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      - vpb25-datapipeline-minio-init
      - vpb25-datapipeline-iceberg-rest

volumes:
  vpb25_minio_data:

networks:
  vpb25_lakehouse:
    driver: bridge
